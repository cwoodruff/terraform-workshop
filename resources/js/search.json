[[{"l":"Terraform Workshop Home","p":["For the content for the workshop, visit the Terraform Workshop GitHub repo.","Ask me about doing a workshop. My email is cwoodruff@live.com."]}],[{"l":"Introduction to the Terraform Workshop","p":["Welcome to the Terraform workshop! We are excited to have you here and look forward to helping you learn how to build your cloud infrastructure using Terraform.","In this workshop, you will learn the fundamentals of Terraform. We will cover various topics, from setting up your environment environment, to learning HCL, to working with variables and modules.","We aim to provide you with a comprehensive understanding of Terraform, its features, and how it can be used to build cloud infrastructures.","Throughout the workshop, you can work on hands-on exercises and projects and receive feedback. You will also have the chance to collaborate and learn from other attendees in the workshop.","Whether you are new to Terraform or looking to enhance your existing skills, we believe this workshop will provide you with valuable insights and help you improve your DevOps practices.","Thank you for joining us, and let's get started!"]}],[{"l":"Required Technologies for the Workshop","p":["Tech","Where to download","Terraform","Install","Azure Account","Set Up","IDE","VSCode or IntelliJ"]}],[{"l":"About the Workshop"}],[{"l":"License for the Workshop","p":["The MIT License (MIT) Copyright © 2023","Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”) to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."]}],[{"l":"Introduction to Terraform"}],[{"l":"Setting Up the Environment","p":["Slide 1 Slide 2 Slide 3 Slide 4 Slide 5 Slide 6 Slide 7 Slide 8 Slide 9"]}],[{"i":"exercise-installing-terraform-and-initializing-a-new-project","l":"Exercise: Installing Terraform and Initializing a New Project"},{"l":"Objective","p":["Ensure that participants have installed Terraform on their machine, set up their development environment, and created a new Terraform project with a basic configuration."]},{"l":"Steps"},{"i":"step-1-install-terraform-on-your-respective-os","l":"Step 1: Install Terraform on Your Respective OS","p":["Add the folder path (e.g., C:\\Terraform) to the system PATH:","Alternatively, download the .zip file from the Terraform website, extract it, and move terraform to /usr/local/bin.","Click Edit the system environment variables.","Click New and enter the path where terraform.exe is located.","Click OK to save.","Confirm that Terraform is correctly installed by checking for the version output.","Confirm the installation by running:","Download the latest Terraform .zip file from the official download page.","Download the latest version of Terraform from the official download page.","Extract the .zip file to a preferred folder (e.g., C:\\Terraform).","Linux:","macOS:","Move terraform to /usr/local/bin:","Open a new Command Prompt or PowerShell window and run:","Open a terminal and use wget or curl to download the .zip file:","Open Terminal and install Terraform using Homebrew:","Open the Start Menu and search for Environment Variables.","Under System variables, select Path and click Edit.","Unzip the downloaded file:","Verify the installation by running:","Windows:"]},{"i":"step-2-set-up-your-preferred-development-environment-vs-code-or-intellij","l":"Step 2: Set Up Your Preferred Development Environment (VS Code or IntelliJ)","p":["Install Visual Studio Code (VS Code)(if not already installed):","Download and install VS Code.","Open VS Code and install the Terraform extension:","Go to the Extensions view ( Ctrl+Shift+X).","Search for “Terraform” and install the HashiCorp Terraform extension.","Install IntelliJ IDEA(if preferred):","Download and install IntelliJ IDEA.","Open IntelliJ and install the Terraform and HCL Language Support plugin:","Go to File > Settings > Plugins(or Preferences > Plugins on macOS).","Search for “Terraform” and install the plugin."]},{"i":"step-3-create-a-new-folder-for-the-terraform-project-and-write-a-basic-maintf-file","l":"Step 3: Create a New Folder for the Terraform Project and Write a Basic main.tf File","p":["Create a New Folder for the Project:","Open a terminal or file explorer and create a new directory where the Terraform project will reside.","For example, create a folder called my-first-terraform-project:","Write a Basic main.tf File:","Inside the new folder, create a file named main.tf.","Open main.tf in your preferred editor (VS Code or IntelliJ) and add a basic configuration.","Example main.tf for creating an Azure Resource Group:"]},{"i":"step-4-run-terraform-init-to-initialize-the-project","l":"Step 4: Run terraform init to Initialize the Project","p":["Initialize the Project:","Open a terminal and navigate to the project directory (where main.tf is located).","Run the following command to initialize the project:","terraform init will download any necessary provider plugins (e.g., the Azure provider) and initialize the working directory.","Review the Output:","Check the terminal output of terraform init. You should see a success message indicating that the initialization is complete.","The output should look something like this:"]},{"l":"Verification","p":["Confirm Terraform Installation:","Run terraform --version to verify Terraform was installed correctly.","Confirm Project Initialization:","Ensure that terraform init ran without errors and produced a success message.","Troubleshoot Issues (if any):","If any issues arise, such as PATH errors, incorrect installation steps, or problems with terraform init, reach out for assistance."]}],[{"i":"bonus-exercise-writing-a-basic-terraform-configuration-and-running-plan","l":"Bonus Exercise: Writing a Basic Terraform Configuration and Running Plan"},{"l":"Exercise Objective","p":["Participants will write a basic Terraform configuration that defines an Azure resource (e.g., a Resource Group or Virtual Network) and then run terraform plan to preview the changes that Terraform would make."]},{"l":"Steps"},{"i":"step-1-create-a-new-directory-for-the-terraform-project","l":"Step 1: Create a New Directory for the Terraform Project","p":["Open a Terminal or Command Prompt:","Ensure that you are in a directory where you want to create your new Terraform project.","Create a New Directory:","Create a folder called my-terraform-project and navigate into it:"]},{"i":"step-2-write-a-basic-maintf-file-to-define-an-azure-resource","l":"Step 2: Write a Basic main.tf File to Define an Azure Resource","p":["Open Your Preferred Text Editor(VS Code or IntelliJ):","Open the my-terraform-project directory in your editor.","Create a main.tf File:","In the my-terraform-project directory, create a new file called main.tf.","Add Basic Configuration for Azure Provider:","Add the following configuration in main.tf to specify the Azure provider and create a Resource Group:","This configuration does the following:","Specifies azurerm as the provider, which allows Terraform to interact with Azure resources.","Defines a resource_group in Azure named myResourceGroup located in the \"East US\" region."]},{"i":"step-3-initialize-the-terraform-project","l":"Step 3: Initialize the Terraform Project","p":["Run terraform init:","In the terminal, ensure you are in the my-terraform-project directory and initialize the Terraform project:","This command downloads the necessary provider plugins (in this case, azurerm) and sets up the project.","Confirm Initialization:","After running terraform init, you should see a message confirming that Terraform has been successfully initialized."]},{"i":"step-4-run-terraform-plan-to-preview-changes","l":"Step 4: Run terraform plan to Preview Changes","p":["Run the terraform plan Command:","In the terminal, run the following command to preview the changes that Terraform will make:","terraform plan compares your configuration with the actual state of resources and shows what actions Terraform will take.","Review the Output:","Look at the output of terraform plan to see the planned changes:","You should see an output indicating that Terraform will add a new resource (indicated by a + symbol).","The output will display the details of the resource (e.g., the name and location of the Resource Group).","Example output:","Understand the terraform plan Output:","The plan output indicates:","Terraform will create (+) the azurerm_resource_group resource.","The resource details such as the id, name, and location are shown.","This step allows you to verify that the configuration is correct before actually applying changes."]},{"l":"Verification","p":["Confirm the Configuration is Valid:","Ensure that the terraform plan output confirms Terraform will create the specified Resource Group.","Troubleshoot Issues (if any):","If there are any errors or unexpected output, review the configuration in main.tf and ensure terraform init was completed successfully."]}],[{"l":"Terraform Configuration Language","p":["Slide 1 Slide 2 Slide 3 Slide 4 Slide 5 Slide 6 Slide 7 Slide 8 Slide 9 Slide 10"]}],[{"i":"exercise-writing-a-basic-terraform-configuration","l":"Exercise: Writing a Basic Terraform Configuration"},{"l":"Objective","p":["Participants will write a basic Terraform configuration to provision a simple resource (e.g., a Resource Group) in Azure, using variables to make the configuration more dynamic."]},{"l":"Steps"},{"i":"step-1-define-the-azure-provider-in-maintf","l":"Step 1: Define the Azure Provider in main.tf","p":["Create a New Project Directory:","Open a terminal or command prompt.","Create a directory for the Terraform project and navigate into it:","Create a main.tf File:","Open your preferred code editor (e.g., VS Code or IntelliJ).","Inside the my-terraform-project directory, create a file named main.tf.","Add the Azure Provider to main.tf:","In the main.tf file, add the following configuration to specify the Azure provider:","This configuration specifies the azurerm provider, which allows Terraform to manage Azure resources. The features block is required by the provider but can be left empty."]},{"i":"step-2-add-a-resource-block-to-create-a-resource-group","l":"Step 2: Add a Resource Block to Create a Resource Group","p":["Define an Azure Resource Group in main.tf:","Below the provider block in main.tf, add a resource block to create an Azure Resource Group.","Example:","This configuration creates a new Azure Resource Group with:","name: The name of the Resource Group (set to \"myResourceGroup\" in this example).","location: The Azure region where the Resource Group will be created (set to \"East US\" here)."]},{"i":"step-3-use-variables-for-dynamic-configuration","l":"Step 3: Use Variables for Dynamic Configuration","p":["Create a variables.tf File:","In the same project directory, create a new file named variables.tf.","This file will hold the variable definitions for the Resource Group name and location, making the configuration more flexible.","Define Variables in variables.tf:","Add the following variable definitions to variables.tf:","Modify main.tf to Use Variables:","Update the resource block in main.tf to use the variables defined in variables.tf:","Here, var.resource_group_name and var.location reference the values of the variables defined in variables.tf."]},{"i":"step-4-run-terraform-plan-to-preview-changes-and-ensure-the-configuration-is-valid","l":"Step 4: Run terraform plan to Preview Changes and Ensure the Configuration is Valid","p":["Initialize the Project:","In the terminal, navigate to the my-terraform-project directory if you’re not already there.","Run terraform init to initialize the project and download the required provider plugin:","Run terraform plan:","After initializing, run the following command to preview the changes Terraform will make:","This command checks the configuration, evaluates the values of variables, and generates a plan showing the actions Terraform will take to create the resource.","Review the Output of terraform plan:","The output should display a summary indicating that Terraform will add a new resource, along with the details of the Resource Group.","Example output:","Ensure that the output matches your expectations and that the Resource Group will be created with the specified name and location."]},{"l":"Verification","p":["Confirm the Initialization:","Ensure that terraform init ran without errors and successfully initialized the project.","Verify the Plan Output:","Confirm that the output of terraform plan shows Terraform will create a new Resource Group with the specified details.","Troubleshoot Issues:","If there are errors in the configuration, review main.tf and variables.tf to ensure all syntax and variable references are correct."]}],[{"i":"bonus-hands-on-exercise-creating-a-configuration-with-variables-and-outputs","l":"Bonus Hands-On Exercise: Creating a Configuration with Variables and Outputs"},{"l":"Exercise Objective","p":["Participants will enhance their Terraform configuration by adding variables to make resource definitions more dynamic and outputs to capture key information about the resources provisioned (e.g., the name of the Resource Group or its location)."]},{"l":"Steps"},{"i":"step-1-define-variables-for-resource-configuration","l":"Step 1: Define Variables for Resource Configuration","p":["Create a variables.tf File:","If you haven’t already, create a variables.tf file in your Terraform project directory.","Define Variables in variables.tf:","Add variable definitions for the Resource Group name and location. This will allow you to change these values dynamically without modifying the resource configuration directly.","Example:","Save the variables.tf File:","Save the file to apply the variable definitions to your Terraform configuration."]},{"i":"step-2-update-maintf-to-use-variables","l":"Step 2: Update main.tf to Use Variables","p":["Open the main.tf File:","Open your existing main.tf file where the Azure provider and Resource Group resource are defined.","Modify the Resource Group to Use Variables:","Update the azurerm_resource_group resource block to use the variables defined in variables.tf.","Example:","Here, var.resource_group_name and var.location reference the values of the variables defined in variables.tf, making the configuration more flexible.","Save the main.tf File:","Save the changes in main.tf."]},{"i":"step-3-define-outputs-to-capture-resource-information","l":"Step 3: Define Outputs to Capture Resource Information","p":["Create an outputs.tf File:","In your project directory, create a new file named outputs.tf. This file will contain the output definitions.","Define Outputs in outputs.tf:","Add output definitions to capture information about the provisioned Resource Group, such as its name and location.","Example:","Save the outputs.tf File:","Save the outputs.tf file to apply the output definitions to your Terraform configuration."]},{"i":"step-4-initialize-and-run-terraform-plan-to-preview-changes","l":"Step 4: Initialize and Run terraform plan to Preview Changes","p":["Initialize the Project(if not already initialized):","In the terminal, navigate to the project directory and run:","This command downloads necessary provider plugins and prepares the working directory for Terraform operations.","Run terraform plan:","Run the following command to preview the changes Terraform will make:","The plan output should show that Terraform will create a Resource Group with the specified name and location.","Review the Plan Output:","Verify that the plan output confirms Terraform will create the specified Resource Group.","The output should include information about the planned creation of the Resource Group."]},{"i":"step-5-apply-the-configuration-to-provision-the-resource-group","l":"Step 5: Apply the Configuration to Provision the Resource Group","p":["Run terraform apply:","Run the following command to apply the configuration and create the Resource Group:","When prompted, type \"yes\" to confirm the apply operation.","Review the Output Values:","After Terraform completes the apply, check the terminal output for the values of resource_group_name and resource_group_location.","Example output:","Verify the Resource in the Azure Portal(optional):","Go to the Azure Portal and navigate to Resource Groups to confirm that the Resource Group has been created with the correct name and location."]},{"l":"Verification","p":["Confirm Variable Use:","Check that the Resource Group was created with the name and location specified in the variables.","Confirm Outputs:","Verify that the output values for resource_group_name and resource_group_location are displayed after running terraform apply.","Troubleshoot Issues (if any):","If any errors occur, check that the variables are correctly referenced in main.tf and that outputs.tf is properly defined."]}],[{"l":"Managing Terraform State"}],[{"i":"exercise-configuring-and-using-remote-state-in-azure","l":"Exercise: Configuring and Using Remote State in Azure"},{"l":"Objective","p":["Participants will configure their Terraform setup to use remote state stored in Azure Blob Storage, which allows for better collaboration and state management in team environments."]},{"l":"Steps"},{"i":"step-1-create-an-azure-storage-account-and-blob-container","l":"Step 1: Create an Azure Storage Account and Blob Container","p":["Open Azure CLI or Azure Portal:","You can use either the Azure CLI (recommended for automation) or the Azure Portal to create the necessary resources.","Create a Resource Group (if not already created):","Replace your-resource-group and location with your desired resource group name and Azure region.","Using the Azure CLI:","Create a Storage Account:","Replace your-storage-account-name with a unique name for the storage account.","Note: Storage account names must be globally unique and can only contain lowercase letters and numbers.","Create a Blob Container:","Replace your-container-name with a name for the container, such as tfstate.","Get the Storage Account Key:","You will need the storage account key to configure remote state in Terraform.","Copy the storage account key for use in the Terraform configuration."]},{"i":"step-2-modify-the-terraform-configuration-to-add-the-remote-state-backend-block","l":"Step 2: Modify the Terraform Configuration to Add the Remote State Backend Block","p":["Open Your main.tf File:","Open your Terraform configuration file, main.tf, in your code editor.","Add the Remote State Backend Block:","At the top of main.tf, add the backend configuration block under terraform {} to enable remote state storage in Azure.","Replace your-storage-account-name, your-container-name, your-resource-group, and your-state-file-name as necessary.","Example:","The key value specifies the name of the state file in the Blob container (e.g., terraform.tfstate).","Configure Environment Variables (Optional):","You can set the storage account key as an environment variable to avoid hardcoding sensitive information.","In your terminal, set the environment variable:"]},{"i":"step-3-run-terraform-init-to-initialize-the-backend-and-migrate-the-state","l":"Step 3: Run terraform init to Initialize the Backend and Migrate the State","p":["Initialize Terraform:","In the terminal, run the following command to initialize the backend and migrate the local state to Azure Blob Storage:","Terraform will prompt you to confirm the migration of your state file from local to remote storage.","Confirm Migration:","Review the prompt and type yes to allow Terraform to move the state file to Azure Blob Storage.","Once the initialization completes, you should see a message confirming that the backend has been successfully configured."]},{"i":"step-4-verify-the-state-file-in-azure-blob-storage","l":"Step 4: Verify the State File in Azure Blob Storage","p":["Log in to the Azure Portal:","Go to the Azure Portal and navigate to the resource group where you created the storage account.","Navigate to the Storage Account and Blob Container:","Open the storage account you created.","In the left-hand menu, select Containers and then choose the container (e.g., tfstate) where you configured the remote state.","Verify the State File:","You should see a file with the name you specified in the key field (e.g., terraform.tfstate).","This file contains the Terraform state, which is now stored in Azure Blob Storage and can be accessed and locked remotely by Terraform."]},{"l":"Verification","p":["Confirm Remote State Initialization:","Verify that terraform init completed successfully and that the state file has been moved to the specified Azure Blob Storage container.","Check the State File Contents(optional):","You can download the .tfstate file from Azure Blob Storage to inspect its contents, ensuring it contains the correct state information.","Troubleshoot Issues:","If there are issues with accessing the Blob Storage or state file, verify that you correctly entered the resource names and storage account key in the configuration."]}],[{"i":"bonus-hands-on-exercise-using-remote-state-with-workspaces","l":"Bonus Hands-On Exercise: Using Remote State with Workspaces"},{"l":"Exercise Objective","p":["Participants will extend their remote state setup by using Terraform workspaces. This will allow them to manage different environments (e.g., dev, staging, prod) using the same remote state backend in Azure Blob Storage."]},{"l":"Prerequisites","p":["Azure Storage Account and Blob Container: Ensure that you have already set up Azure Blob Storage for remote state, as outlined in the previous exercise.","Terraform Backend Configured: Make sure that your main.tf file includes the backend block pointing to Azure Blob Storage."]},{"l":"Steps"},{"i":"step-1-modify-the-backend-configuration-to-use-workspaces","l":"Step 1: Modify the Backend Configuration to Use Workspaces","p":["Open Your main.tf File:","Open your main.tf file where the Azure provider and backend configuration are defined.","Update the Backend Block for Workspace Support:","Modify the key parameter in the backend block to use the terraform.workspace interpolation syntax, which will dynamically set the state file path based on the current workspace.","Example:","Here, ${terraform.workspace} will dynamically create a separate state file for each workspace (e.g., dev/terraform.tfstate, staging/terraform.tfstate, etc.).","Save the main.tf File:","Save your changes in main.tf."]},{"i":"step-2-initialize-the-backend-and-workspaces","l":"Step 2: Initialize the Backend and Workspaces","p":["Run terraform init to Reinitialize the Backend:","In the terminal, run the following command to reinitialize the backend with the updated configuration:","Terraform will detect the change in backend configuration and ask for confirmation to initialize with the new settings.","Confirm Backend Initialization:","Follow the prompts in the terminal and confirm the initialization."]},{"i":"step-3-create-and-switch-between-workspaces","l":"Step 3: Create and Switch Between Workspaces","p":["Create a New Workspace for the Development Environment:","Use the following command to create a new workspace called dev:","Terraform will switch to the dev workspace after creating it. This workspace will now have its own state file in Azure Blob Storage ( dev/terraform.tfstate).","Create a Workspace for Staging:","Create another workspace called staging:","Terraform will automatically switch to the staging workspace after creating it. The state file for this workspace will be stored in staging/terraform.tfstate.","Create a Workspace for Production:","Similarly, create a prod workspace for the production environment:","The state file for this workspace will be stored in prod/terraform.tfstate.","Switch Between Workspaces:","You can switch between the workspaces using the select command:","This command switches the current workspace back to dev, allowing you to manage resources specific to that environment."]},{"i":"step-4-apply-the-configuration-in-each-workspace","l":"Step 4: Apply the Configuration in Each Workspace","p":["Run terraform apply in the Dev Workspace:","Make sure you are in the dev workspace by running:","Run terraform apply to apply the configuration in the dev environment:","Type yes when prompted to confirm.","Repeat for Staging and Production Workspaces:","Switch to the staging workspace and apply the configuration:","Switch to the prod workspace and apply the configuration:","Each environment will have its own state file stored in Azure Blob Storage under the respective workspace directory (e.g., dev/terraform.tfstate, staging/terraform.tfstate, prod/terraform.tfstate)."]},{"i":"step-5-verify-state-files-in-azure-blob-storage","l":"Step 5: Verify State Files in Azure Blob Storage","p":["Log in to the Azure Portal:","Go to the Azure Portal and navigate to the resource group containing the storage account.","Navigate to the Storage Account and Container:","Open the storage account.","In the left-hand menu, select Containers and then open the container where you stored the Terraform state files.","Verify the State Files:","You should see separate directories or state files for each workspace (e.g., dev/terraform.tfstate, staging/terraform.tfstate, and prod/terraform.tfstate).","Each state file will contain the specific resources applied in that workspace, allowing you to manage separate environments."]},{"l":"Verification","p":["Confirm Workspace Creation:","Use terraform workspace list to view all created workspaces and verify that dev, staging, and prod are present.","Check Azure Blob Storage:","Verify that each workspace has its own state file in Azure Blob Storage, confirming that remote state is correctly isolated by environment.","Troubleshoot Issues:","If state files are not appearing as expected, ensure that the key parameter in the backend configuration uses ${terraform.workspace} syntax correctly."]}],[{"l":"Provisioning Infrastructure"}],[{"i":"exercise-provisioning-a-web-server-on-azure","l":"Exercise: Provisioning a Web Server on Azure"},{"l":"Objective","p":["Provision a web server on Azure using Terraform by following the Terraform workflow ( plan, apply, destroy). This exercise will help participants understand how to define resources in a Terraform configuration, preview changes, apply the configuration, and optionally clean up resources."]},{"l":"Steps"},{"i":"step-1-define-an-azure-virtual-machine-in-the-maintf-file","l":"Step 1: Define an Azure Virtual Machine in the main.tf File","p":["Add a resource block for a Network Interface that connects to the subnet:","Add a resource block for a Virtual Network and a Subnet:","Add a resource block for the Resource Group:","Add a resource block to create a Virtual Machine with the following configuration:","Add the Azure Provider Configuration:","Admin Password: P@ssw0rd123!","Admin Username: adminuser","Create a directory for the project and navigate into it:","Create a main.tf File:","Create a New Directory for the Project:","Define the Azure Resource Group:","Define the Network Interface:","Define the Virtual Machine:","Define the Virtual Network and Subnet:","Image: Ubuntu Server 18.04 LTS","In main.tf, add the following code to configure the Azure provider:","Inside the web-server-project directory, create a file named main.tf.","Open a terminal or command prompt.","Open your preferred code editor (e.g., VS Code or IntelliJ).","Save all changes in main.tf.","Save the main.tf File:","This configuration defines a VM with:","VM Size: Standard_DS1_v2"]},{"i":"step-2-run-terraform-plan-to-preview-the-changes","l":"Step 2: Run terraform plan to Preview the Changes","p":["Initialize the Project:","In the terminal, navigate to the project directory (if not already there) and run:","This will download the necessary provider plugins and prepare the project for deployment.","Run terraform plan:","Use the following command to preview the changes Terraform will make:","The terraform plan command shows a detailed list of the resources that will be created, including the Resource Group, Virtual Network, Subnet, Network Interface, and Virtual Machine.","Review the Plan Output:","Verify that the plan output lists all the resources defined in main.tf with a + symbol, indicating that they will be created."]},{"i":"step-3-run-terraform-apply-to-provision-the-resources","l":"Step 3: Run terraform apply to Provision the Resources","p":["Apply the Configuration:","Run the following command to provision the resources on Azure:","When prompted, type yes to confirm the apply operation.","Review the Output:","After the apply completes, Terraform will display the resources created and their properties, such as VM ID, IP address, etc."]},{"i":"step-4-verify-the-vm-in-the-azure-portal","l":"Step 4: Verify the VM in the Azure Portal","p":["Log in to the Azure Portal:","Go to the Azure Portal.","Navigate to Resource Groups:","Locate the Resource Group named webserver-rg.","Verify the Virtual Machine:","Check that the VM named example-vm has been created with the specified configuration.","Confirm that the Virtual Network, Subnet, and Network Interface are also present."]},{"i":"optional-step-5-run-terraform-destroy-to-clean-up-resources","l":"Optional Step 5: Run terraform destroy to Clean Up Resources","p":["Destroy the Resources:","To delete all resources created by this configuration, run:","Type yes when prompted to confirm the destroy operation.","Verify Resource Deletion in the Azure Portal:","After the destroy operation completes, refresh the Azure Portal and confirm that the resources (Resource Group, VM, etc.) have been removed."]}],[{"i":"bonus-hands-on-exercise-creating-an-azure-load-balancer-for-high-availability","l":"Bonus Hands-On Exercise: Creating an Azure Load Balancer for High Availability"},{"l":"Exercise Objective","p":["In this bonus exercise, participants will create an Azure Load Balancer and configure it to distribute traffic across two web servers, ensuring high availability and redundancy."]},{"l":"Steps"},{"i":"step-1-define-the-azure-provider-and-resource-group-in-maintf","l":"Step 1: Define the Azure Provider and Resource Group in main.tf","p":["Create a New Project Directory:","Open a terminal or command prompt.","Create a new directory for the project and navigate into it:","Create a main.tf File:","Open your preferred code editor and create a file named main.tf in the load-balancer-project directory.","Add the Azure Provider Configuration:","Add the following code to configure the Azure provider:","Define a Resource Group:","Add a resource block for the Resource Group that will contain all resources for the load balancer setup:"]},{"i":"step-2-define-a-virtual-network-and-subnet","l":"Step 2: Define a Virtual Network and Subnet","p":["Add a Virtual Network and Subnet:","In main.tf, define a Virtual Network and a Subnet for the load balancer and VMs to reside in:"]},{"i":"step-3-define-network-interfaces-and-virtual-machines","l":"Step 3: Define Network Interfaces and Virtual Machines","p":["Define Network Interfaces for Each VM:","Create two network interfaces, one for each VM, and associate them with the subnet:","Define Two Virtual Machines:","Create two virtual machines, vm1 and vm2, that will serve as backend web servers.","Example:"]},{"i":"step-4-create-an-azure-load-balancer-and-backend-pool","l":"Step 4: Create an Azure Load Balancer and Backend Pool","p":["Define a Public IP Address for the Load Balancer:","Add a public IP resource for the load balancer:","Create the Load Balancer:","Define the Azure Load Balancer, associating it with the public IP:","Define the Backend Pool for the VMs:","Associate the backend VMs with the load balancer using a backend address pool:"]},{"i":"step-5-add-load-balancer-rules-and-health-probes","l":"Step 5: Add Load Balancer Rules and Health Probes","p":["Create a Health Probe:","Define a health probe to check the status of the VMs:","Add a Load Balancer Rule:","Define a rule to distribute traffic on port 80 across the backend VMs:"]},{"i":"step-6-run-terraform-commands","l":"Step 6: Run Terraform Commands","p":["Initialize the Project:","In the terminal, navigate to the project directory and run:","Run terraform plan:","Use terraform plan to preview the resources to be created:","Run terraform apply:","Apply the configuration to provision the resources:","Type yes when prompted."]},{"i":"step-7-verify-the-load-balancer-and-vms-in-azure-portal","l":"Step 7: Verify the Load Balancer and VMs in Azure Portal","p":["Log in to the Azure Portal:","Go to the Azure Portal.","Navigate to the Resource Group:","Locate the Resource Group loadbalancer-rg.","Verify the Load Balancer and Public IP:","Check that the Load Balancer and its associated public IP are created.","You can test the setup by accessing the public IP in a web browser or using a tool like curl.","Verify the VMs in the Backend Pool:","Ensure that both VMs are associated with the load balancer's backend pool for high availability."]}],[{"l":"Variables and Outputs"}],[{"i":"exercise-creating-a-configuration-with-variables-and-outputs","l":"Exercise: Creating a Configuration with Variables and Outputs"},{"l":"Objective","p":["Participants will create a Terraform configuration that uses variables to define a Resource Group and outputs to display its name and location. This exercise will help participants understand how to use variables for flexible configurations and outputs to extract useful information."]},{"l":"Steps"},{"i":"step-1-create-a-variablestf-file-with-input-variables","l":"Step 1: Create a variables.tf File with Input Variables","p":["Create a variables.tf File:","Open your code editor (e.g., VS Code or IntelliJ).","In your project directory, create a new file named variables.tf.","Define Variables for Resource Group Name and Location:","In variables.tf, add the following code to define the resource_group_name and location variables:","These variables allow the configuration to dynamically set the Resource Group name and location, making it easy to reuse the code for different projects or environments.","Save the variables.tf File."]},{"i":"step-2-create-a-maintf-file-that-uses-the-variables","l":"Step 2: Create a main.tf File that Uses the Variables","p":["Create a main.tf File:","In the same project directory, create a new file named main.tf.","Add Resource Group Configuration Using Variables:","In main.tf, define a Resource Group resource and use the variables defined in variables.tf to set its name and location:","Here, var.resource_group_name and var.location reference the values of the variables, making the configuration flexible.","Save the main.tf File."]},{"i":"step-3-create-an-outputstf-file-to-display-resource-information","l":"Step 3: Create an outputs.tf File to Display Resource Information","p":["Create an outputs.tf File:","In your project directory, create a new file named outputs.tf.","Define Output Values for Resource Group Name and Location:","In outputs.tf, add the following code to define outputs that display the Resource Group’s name and location:","These output values will provide useful information about the provisioned resources when terraform apply completes.","Save the outputs.tf File."]},{"i":"step-4-run-terraform-plan-and-terraform-apply-to-provision-the-resource-group-and-display-outputs","l":"Step 4: Run terraform plan and terraform apply to Provision the Resource Group and Display Outputs","p":["Initialize the Terraform Project:","In the terminal, navigate to the project directory and run:","This command will download necessary provider plugins and prepare the project for deployment.","Run terraform plan to Preview the Changes:","Use terraform plan to verify the configuration and preview the changes Terraform will make:","Review the output to ensure that Terraform will create a Resource Group with the specified name and location.","Run terraform apply to Create the Resource Group:","Apply the configuration to create the Resource Group on Azure:","Type yes when prompted to confirm the apply operation.","Review the Output Values:","After terraform apply completes, check the terminal output to see the values for resource_group_name and resource_group_location.","Example output:"]},{"l":"Verification","p":["Check the Azure Portal:","Go to the Azure Portal and navigate to Resource Groups.","Verify that the Resource Group named myResourceGroup was created in the specified location (e.g., \"East US\").","Confirm Output Values:","Ensure that the output values for resource_group_name and resource_group_location displayed in the terminal match the values in the Azure Portal."]}],[{"i":"bonus-hands-on-exercise-using-variables-and-outputs-across-multiple-environments","l":"Bonus Hands-On Exercise: Using Variables and Outputs Across Multiple Environments"},{"l":"Exercise Objective","p":["Participants will create separate variable files for development and production environments, allowing them to provision the same infrastructure with different parameters and outputs. This exercise will help participants understand how to manage multiple environments with Terraform using variable files."]},{"l":"Steps"},{"i":"step-1-set-up-the-project-directory-and-base-configuration","l":"Step 1: Set Up the Project Directory and Base Configuration","p":["Create a New Project Directory(if not already created):","Open a terminal and create a new directory for the project, then navigate into it:","Create a main.tf File:","In your project directory, create a file named main.tf.","Define the Azure provider and a Resource Group resource in main.tf:","This configuration uses variables to set the name and location of the Resource Group, allowing the values to be customized by environment.","Save the main.tf File."]},{"i":"step-2-define-variables-in-variablestf","l":"Step 2: Define Variables in variables.tf","p":["Create a variables.tf File:","In the same project directory, create a new file named variables.tf.","Define Variables for Resource Group Name and Location:","In variables.tf, add the following code to define the resource_group_name and location variables:","These variables will be set differently for each environment using separate variable files.","Save the variables.tf File."]},{"i":"step-3-create-separate-variable-files-for-development-and-production","l":"Step 3: Create Separate Variable Files for Development and Production","p":["Create a dev.tfvars File:","In your project directory, create a file named dev.tfvars.","Add the following variable values specific to the development environment:","Create a prod.tfvars File:","In your project directory, create another file named prod.tfvars.","Add the following variable values specific to the production environment:","Save Both Variable Files."]},{"i":"step-4-define-outputs-in-outputstf","l":"Step 4: Define Outputs in outputs.tf","p":["Create an outputs.tf File:","In your project directory, create a new file named outputs.tf.","Define Outputs for Resource Group Name and Location:","In outputs.tf, add the following output definitions to display the Resource Group’s name and location:","Save the outputs.tf File."]},{"i":"step-5-run-terraform-commands-for-each-environment","l":"Step 5: Run Terraform Commands for Each Environment","p":["Initialize the Project:","In the terminal, run the following command to initialize the project and download provider plugins:","Run terraform plan for the Development Environment:","Use terraform plan with the -var-file flag to preview the changes for the development environment:","Review the output to ensure that Terraform will create a Resource Group with the name dev-resource-group in the \"East US\" region.","Run terraform apply for the Development Environment:","Apply the configuration using the dev.tfvars file to create the Resource Group for development:","Type yes when prompted to confirm the apply operation.","After the apply completes, note the output values for resource_group_name and resource_group_location, which should reflect the development environment settings.","Repeat for the Production Environment:","Run terraform plan and terraform apply using the prod.tfvars file:","Confirm the creation of the Resource Group for the production environment, which should have the name prod-resource-group and location \"West US\"."]},{"i":"step-6-verify-resource-groups-in-azure-portal","l":"Step 6: Verify Resource Groups in Azure Portal","p":["Log in to the Azure Portal:","Go to the Azure Portal.","Navigate to Resource Groups:","Check that both dev-resource-group and prod-resource-group have been created in the respective regions specified in dev.tfvars and prod.tfvars."]},{"l":"Verification","p":["Confirm Environment-Specific Resources:","Ensure that the Resource Groups in Azure match the names and locations specified in dev.tfvars and prod.tfvars.","Confirm Output Values:","Verify that the output values displayed in the terminal during terraform apply reflect the correct resource group name and location for each environment."]}],[{"l":"Modules and Reusability"}],[{"i":"exercise-refactoring-configurations-into-reusable-modules","l":"Exercise: Refactoring Configurations into Reusable Modules"},{"l":"Objective","p":["Participants will refactor their existing configurations (such as the one for provisioning a web server) into reusable modules. This exercise will help participants organize and parameterize their Terraform code, making it easier to reuse across different projects and environments."]},{"l":"Steps"},{"i":"step-1-create-a-new-directory-for-the-module","l":"Step 1: Create a New Directory for the Module","p":["Create a Module Directory:","Open your terminal and navigate to the project directory.","Create a new directory named modules/webserver to hold the reusable web server module:","Verify Directory Structure:","Your project directory should now contain the following structure:"]},{"i":"step-2-move-the-existing-web-server-configuration-into-the-module","l":"Step 2: Move the Existing Web Server Configuration into the Module","p":["Open Your Web Server Configuration:","Locate your existing web server configuration (typically defined in main.tf).","Move the Web Server Configuration to the Module Directory:","Move the resource blocks that define the web server (e.g., Virtual Machine, Network Interface, Public IP) from main.tf to a new file named main.tf inside modules/webserver.","Example main.tf for the Module:","In modules/webserver/main.tf, the configuration might look like this:","Save the Module Configuration."]},{"i":"step-3-define-input-variables-in-variablestf-for-the-module","l":"Step 3: Define Input Variables in variables.tf for the Module","p":["Create a variables.tf File in the Module Directory:","In modules/webserver, create a new file named variables.tf.","Define Variables for Resource Group Name and Location:","Add variables to parameterize the Resource Group name and location:","Save the variables.tf File."]},{"i":"step-4-create-outputstf-to-capture-and-return-useful-information","l":"Step 4: Create outputs.tf to Capture and Return Useful Information","p":["Create an outputs.tf File in the Module Directory:","In modules/webserver, create a new file named outputs.tf.","Define Outputs for Useful Information:","Capture information such as the public IP address of the Virtual Machine:","Save the outputs.tf File."]},{"i":"step-5-call-the-module-in-the-root-configuration-maintf","l":"Step 5: Call the Module in the Root Configuration (main.tf)","p":["Open the Root main.tf File:","Open the main.tf file in the root directory of your project.","Add a Module Block to Call the webserver Module:","Call the webserver module by specifying its source directory and passing in the necessary variables:","Save the main.tf File."]},{"i":"step-6-run-terraform-commands-to-test-the-module","l":"Step 6: Run Terraform Commands to Test the Module","p":["Initialize the Project:","In the terminal, run terraform init to ensure that all module dependencies are loaded and the project is ready:","Run terraform plan to Preview the Changes:","Run terraform plan to review the resources that will be created by the webserver module:","Ensure that the output includes the expected resources, such as the Virtual Machine and Network Interface.","Run terraform apply to Deploy the Module:","Apply the configuration to create the web server resources using the module:","Type yes when prompted to confirm the apply operation.","Review the Output Values:","After the apply completes, observe the output values defined in outputs.tf, such as the VM ID and public IP address."]},{"l":"Verification","p":["Confirm Resource Creation in Azure:","Log in to the Azure Portal and check the Resource Group specified in the module call.","Verify that the web server resources (e.g., Virtual Machine, Network Interface) have been created with the correct settings.","Check Output Values:","Ensure that the output values displayed in the terminal match the expected details for the VM and network configurations."]}],[{"i":"bonus-hands-on-exercise-creating-a-networking-module-for-virtual-networks","l":"Bonus Hands-On Exercise: Creating a Networking Module for Virtual Networks"},{"l":"Exercise Objective","p":["In this bonus exercise, participants will create a reusable Terraform module to manage virtual networks (VNets) in Azure. They will then use this module to deploy virtual networks in different environments, such as development and production."]},{"l":"Steps"},{"i":"step-1-create-a-new-directory-for-the-networking-module","l":"Step 1: Create a New Directory for the Networking Module","p":["Create the Module Directory:","Open your terminal and navigate to your project directory.","Create a new directory named modules/network to hold the networking module:","Verify Directory Structure:","Your project directory should now contain:"]},{"i":"step-2-create-the-maintf-for-the-networking-module","l":"Step 2: Create the main.tf for the Networking Module","p":["Create a main.tf File in the Module Directory:","In modules/network, create a file named main.tf to hold the virtual network configuration.","Add Virtual Network and Subnet Resource Definitions:","In modules/network/main.tf, define resources for the virtual network and a subnet:","This configuration defines:","Virtual Network: Using parameters for the name, location, resource group, and address space.","Subnet: Using parameters for the subnet name, address prefixes, and associations to the virtual network.","Save the main.tf File."]},{"i":"step-3-define-input-variables-in-variablestf-for-the-module","l":"Step 3: Define Input Variables in variables.tf for the Module","p":["Create a variables.tf File in the Module Directory:","In modules/network, create a file named variables.tf.","Define Variables for VNet and Subnet Properties:","Add the following variable definitions to parameterize the VNet and subnet configuration:","Save the variables.tf File."]},{"i":"step-4-create-outputs-in-outputstf-for-the-module","l":"Step 4: Create Outputs in outputs.tf for the Module","p":["Create an outputs.tf File in the Module Directory:","In modules/network, create a file named outputs.tf.","Define Output Values for VNet and Subnet Information:","Add outputs to provide information about the created virtual network and subnet:","Save the outputs.tf File."]},{"i":"step-5-call-the-networking-module-in-the-root-configuration-for-each-environment","l":"Step 5: Call the Networking Module in the Root Configuration for Each Environment","p":["Create a main.tf File in the Root Directory:","In the root directory of your project, open or create main.tf to use the networking module.","Add Module Calls for Development and Production Environments:","Call the network module twice, passing in different parameters for each environment:","The module is sourced from ./modules/network, and each environment (dev and prod) has unique values for vnet_name, location, resource_group_name, and address_space.","Save the main.tf File."]},{"i":"step-6-run-terraform-commands-to-test-the-module","l":"Step 6: Run Terraform Commands to Test the Module","p":["Initialize the Project:","In the terminal, run terraform init to initialize the project and prepare for deployment:","Run terraform plan to Preview the Changes:","Run terraform plan to review the resources that will be created for both the development and production environments:","Verify that the output includes the virtual network and subnet resources for both dev and prod environments.","Run terraform apply to Deploy the Module:","Apply the configuration to create the virtual networks and subnets in Azure:","Type yes when prompted to confirm the apply operation.","Review the Output Values:","After the apply completes, observe the output values defined in outputs.tf, such as vnet_id and subnet_id for both environments."]},{"l":"Verification","p":["Confirm Resource Creation in Azure:","Log in to the Azure Portal and navigate to the Resource Groups for both dev-resource-group and prod-resource-group.","Verify that the virtual networks ( dev-vnet and prod-vnet) and their respective subnets have been created with the correct configurations.","Check Output Values:","Ensure that the output values displayed in the terminal match the expected VNet and subnet information for each environment."]}],[{"l":"Advanced Terraform Features"}],[{"i":"exercise-implementing-provisioners-and-functions","l":"Exercise: Implementing Provisioners and Functions"},{"l":"Objective","p":["In this exercise, participants will:","Implement provisioners to install a web server (Nginx) on an Azure Virtual Machine.","Use Terraform functions to dynamically adjust the configuration based on the environment.","Create and use separate workspaces for development (dev) and production (prod) environments."]},{"l":"Steps"},{"i":"step-1-provision-a-virtual-machine-with-nginx-using-a-provisioner","l":"Step 1: Provision a Virtual Machine with Nginx Using a Provisioner","p":["Define a Virtual Machine in main.tf:","In your project directory, create or open a main.tf file.","Add a resource block for an Azure Virtual Machine, configuring basic settings:","This configuration defines a Linux VM running Ubuntu Server 18.04 with an inline remote-exec provisioner to install Nginx after the VM is provisioned.","Define Network Interface and Public IP(if needed):","Ensure the VM has a network interface and public IP so the provisioner can connect and install Nginx.","Example:"]},{"i":"step-2-use-terraform-functions-to-adjust-configuration-dynamically","l":"Step 2: Use Terraform Functions to Adjust Configuration Dynamically","p":["Define the VM Size Based on Environment:","Use the terraform.workspace variable and a conditional expression to set the VM size.","Add the following code to variables.tf or directly in main.tf:","Use the length() Function(Optional Example):","To dynamically calculate values based on lists, you could use the length() function in expressions:","This example calculates the number of network interfaces attached to the VM."]},{"i":"step-3-switch-workspaces-for-dev-and-prod-environments","l":"Step 3: Switch Workspaces for Dev and Prod Environments","p":["Create and Switch to the Development Workspace:","In the terminal, run:","Terraform will create a new workspace called dev and switch to it.","Create the Production Workspace:","Create another workspace for the production environment:","Verify Workspace:","You can check your current workspace with:","Set Environment-Specific Values(Optional):","Use separate variable files (e.g., dev.tfvars and prod.tfvars) to provide different values for location or resource_group_name based on the workspace."]},{"i":"step-4-run-terraform-plan-and-terraform-apply-to-verify-the-setup","l":"Step 4: Run terraform plan and terraform apply to Verify the Setup","p":["Initialize the Project(if not already initialized):","Run terraform init to download necessary provider plugins and prepare the environment:","Run terraform plan:","In the current workspace, run terraform plan to verify the configuration:","Review the output to ensure Terraform will provision a VM with the correct configurations (e.g., VM size based on the workspace).","Run terraform apply to Deploy the VM:","Run terraform apply to create the VM and install Nginx via the provisioner:","Type yes when prompted to confirm the apply operation.","Verify the Setup in the Azure Portal:","Go to the Azure Portal and check that the VM has been created in the correct environment with Nginx installed."]},{"l":"Verification","p":["Confirm VM Creation:","Verify that a VM has been created in Azure for each workspace and is using the correct VM size based on the environment.","Verify Nginx Installation:","Use SSH to connect to the VM and check if Nginx is running:","Verify Output Values(if configured):","Check any outputs, such as number_of_nics, to ensure they reflect the actual setup."]}],[{"i":"bonus-hands-on-exercise-dynamic-configuration-with-workspaces-and-provisioners","l":"Bonus Hands-On Exercise: Dynamic Configuration with Workspaces and Provisioners"},{"l":"Exercise Objective","p":["In this exercise, participants will create dynamic infrastructure that adjusts based on the current workspace. They will also use provisioners to automatically install different software on virtual machines based on the environment (e.g., installing Nginx in development and Apache in production)."]},{"l":"Steps"},{"i":"step-1-set-up-workspace-based-variables","l":"Step 1: Set Up Workspace-Based Variables","p":["Create Separate Variable Files for Dev and Prod:","In your project directory, create two separate variable files: dev.tfvars and prod.tfvars.","Define Environment-Specific Variables in Each File:","Add environment-specific values for resource_group_name, location, and vm_software in each file.","dev.tfvars:","prod.tfvars:","Create variables.tf:","Define the variables for resource_group_name, location, and vm_software in variables.tf:","Save All Variable Files."]},{"i":"step-2-define-the-virtual-machine-configuration-in-maintf","l":"Step 2: Define the Virtual Machine Configuration in main.tf","p":["Open or Create main.tf:","In your project directory, create or open a main.tf file to define the VM configuration.","Add a Virtual Machine Resource with Provisioners:","Define the Azure VM resource, using a remote-exec provisioner to install software based on the environment.","Example configuration:","The vm_size parameter dynamically changes based on the workspace, and the vm_software variable installs different software based on the environment.","Save main.tf."]},{"i":"step-3-set-up-networking-resources-if-needed","l":"Step 3: Set Up Networking Resources (if needed)","p":["Define Network Interface and Public IP:","Ensure that the VM has a network interface and a public IP to allow SSH access for the provisioner.","Example:"]},{"i":"step-4-initialize-and-configure-workspaces-for-dev-and-prod","l":"Step 4: Initialize and Configure Workspaces for Dev and Prod","p":["Initialize the Project:","Run terraform init to download provider plugins and prepare the environment:","Create and Switch to the Development Workspace:","In the terminal, create the dev workspace and switch to it:","Create the Production Workspace:","Create another workspace for production:","Verify Current Workspace:","Run terraform workspace show to confirm your current workspace."]},{"i":"step-5-run-terraform-commands-for-each-environment","l":"Step 5: Run Terraform Commands for Each Environment","p":["Run terraform plan for Development Environment:","In the dev workspace, use terraform plan with dev.tfvars to preview the changes:","Run terraform apply for Development Environment:","Apply the configuration to deploy the VM with Nginx in the development environment:","Type yes to confirm.","Switch to Production Workspace:","Switch to the production workspace:","Run terraform plan and terraform apply for Production Environment:","Run terraform plan and terraform apply with prod.tfvars to deploy the VM with Apache in the production environment:","Confirm the deployment by typing yes when prompted."]},{"l":"Verification","p":["Check the Azure Portal:","Go to the Azure Portal and navigate to the resource groups for each environment ( dev-resource-group and prod-resource-group).","Verify that VMs have been created in each environment with the correct size (based on workspace).","Verify Software Installation:","Connect to each VM via SSH and confirm the installed software:","For dev, verify Nginx:","For prod, verify Apache:","Confirm Dynamic Configuration:","Verify that the VM size and software installation vary based on the workspace (dev or prod)."]}],[{"l":"Closing Remarks"}],[{"i":"bonus-hands-on-exercise-building-a-complete-terraform-project-with-cicd","l":"Bonus Hands-On Exercise: Building a Complete Terraform Project with CI/CD"},{"l":"Exercise Objective","p":["In this exercise, participants will build a complete infrastructure project using Terraform and integrate it with a CI/CD pipeline to enable automatic deployments. By the end, participants will have a fully automated workflow to manage and deploy infrastructure changes."]},{"l":"Steps"},{"i":"step-1-set-up-a-terraform-project-directory-structure","l":"Step 1: Set Up a Terraform Project Directory Structure","p":["Create the Project Directory:","In your terminal, create a new directory for the project and navigate into it:","Create the Basic Directory Structure:","Inside terraform-cicd-project, set up the following structure:"]},{"i":"step-2-define-the-infrastructure-in-terraform","l":"Step 2: Define the Infrastructure in Terraform","p":["Create the main.tf File:","Open or create main.tf in your project directory. Add the configuration for an Azure Resource Group and Virtual Machine:","Define Variables in variables.tf:","Create variables.tf with the necessary input variables:","Define Outputs in outputs.tf:","Create outputs.tf to output important information about the deployed infrastructure:","Create Environment-Specific Variable Files:","Define environment-specific values in dev.tfvars and prod.tfvars.","dev.tfvars:","prod.tfvars:"]},{"i":"step-3-initialize-the-terraform-project","l":"Step 3: Initialize the Terraform Project","p":["Initialize the Project:","Run terraform init to initialize the project and download necessary provider plugins:","Run terraform plan:","Test the configuration to ensure there are no errors by running:"]},{"i":"step-4-set-up-a-cicd-pipeline-eg-github-actions","l":"Step 4: Set Up a CI/CD Pipeline (e.g., GitHub Actions)","p":["Create a GitHub Repository:","Go to GitHub and create a new repository.","Clone the repository to your local machine and add all files from terraform-cicd-project to the repository.","Create a GitHub Actions Workflow File:","In your project directory, create a .github/workflows directory and add a workflow file for Terraform:","Define the Workflow in terraform.yml:","Open terraform.yml and configure it to automatically run terraform plan and terraform apply on the main branch.","Example workflow:","Note: This workflow uses environment variables from GitHub Secrets (e.g., ARM_CLIENT_ID, ARM_CLIENT_SECRET). You must set these in the GitHub repository settings.","Set Up GitHub Secrets for Azure Authentication:","In your GitHub repository, navigate to Settings > Secrets and variables > Actions and add the following secrets:","ARM_CLIENT_ID","ARM_CLIENT_SECRET","ARM_SUBSCRIPTION_ID","ARM_TENANT_ID"]},{"i":"step-5-test-the-cicd-pipeline","l":"Step 5: Test the CI/CD Pipeline","p":["Push Your Code to GitHub:","Commit and push all files to the main branch of your GitHub repository:","Monitor the Workflow:","Go to your GitHub repository, navigate to the Actions tab, and watch the pipeline run.","The workflow should automatically run terraform init, terraform plan, and terraform apply, deploying the infrastructure."]},{"i":"step-6-verify-the-deployment-in-azure","l":"Step 6: Verify the Deployment in Azure","p":["Log in to the Azure Portal:","Go to the Azure Portal.","Verify that the Resource Group and Virtual Machine were created according to the configuration.","Check Output Values:","After the workflow completes, review the GitHub Actions logs for the output values (such as resource_group_name and vm_id)."]},{"i":"optional-extend-the-pipeline-for-multiple-environments","l":"Optional: Extend the Pipeline for Multiple Environments","p":["Modify the Workflow for Environment-Specific Files:","Update the GitHub Actions workflow to support both dev.tfvars and prod.tfvars by using environment branches or workflows that trigger based on specific branches (e.g., dev and prod branches).","Create Separate Branches:","Use dev and prod branches in GitHub to separate development and production environments in the pipeline."]}]]